options{
	STATIC=false;
	MULTI=true;
	//NODE_DEFAULT_VOID=true;
	VISITOR=true;
}

PARSER_BEGIN(Parser)

package javacc;

import created.*;
import java.util.*;
import java.io.*;

public class Parser {
	//static String getTokens = "";
    
	public static void advancedParsing(String sourceName, boolean BlockDebug, boolean IRDebug){

	System.out.println("Checking syntax in the advanced method...");
	int blockNum = 0;
	String curBlock = null;
	String blkFileName = null;
	boolean modified = false;
	boolean cursesRunning = false;
	List<SimpleNode> snodes = new ArrayList<SimpleNode>();
	List<String> log = new ArrayList<String>();

	try{
	  	FileReader source = new FileReader(new File(sourceName));
		int numOfBlocks = BlockManager.Dividing(source);
		if(BlockDebug == true){
			BlockManager.Generate();
			System.exit(0);
		}
		source.close();

		//Curses.Window();
		source = new FileReader(new File(sourceName));
		//Curses.setSource(source);
		ParserVisitor visitor = new ParserVisitorImplements(true);
		SimpleNode snode = null;
		boolean reparse = BlockManager.getPreData(sourceName);
		int reuseNum;

		for(blockNum = 0; blockNum < numOfBlocks; blockNum++){
			reuseNum=BlockManager.compare(blockNum);
			if(reparse && reuseNum != -1) {
				log.add("Block" + blockNum + " can be reused...");
				blkFileName = sourceName.replace(".c","")+"_blk"+reuseNum+".bin";

				ObjectInputStream objInStream = new ObjectInputStream(new FileInputStream(blkFileName));
              snode = (SimpleNode) objInStream.readObject();
              objInStream.close();

              log.add("Block" + blockNum + " is reused.");
              snodes.add(snode);
              snode.jjtAccept(visitor,null);
				IRGenerator.IRfragConfirm();
			}else { 
				log.add("Checking block" + blockNum + "...");
				curBlock = BlockManager.blockRef(blockNum);
				//System.out.println(curBlock);
				Parser part = new Parser(new StringReader(curBlock));
				blkFileName = sourceName.replace(".c","")+"_blk"+blockNum+".bin";
				
				try {
					//if(!(new File(blkFileName).exists())) {
					if(blockNum == 0) {
				   		snode = part.defines();
					}else{
				  		snode = part.chkblk();
					}

					/*ObjectOutputStream objOutStream = new ObjectOutputStream(new FileOutputStream(blkFileName));
                 	objOutStream.writeObject(snode);
                 	objOutStream.close();*/

                 	log.add("Block" + blockNum + " is parsed.");
                 	snodes.add(snode);
					snode.jjtAccept(visitor,null);
					IRGenerator.IRfragConfirm();
				}catch(ParseException e) {
			  		modified = true;
					log.add("Syntax error in block" + blockNum + ".");
					log.add("Opening Syntax Error Recovery...");

					if(cursesRunning == false) {
						Curses.Window();
						cursesRunning = true;
						Curses.setSource(source);
					}

					Curses.setErrorMsg(e.getMessage().toString());
					String modBlock = Curses.Recover(curBlock, blockNum);
					log.add("");
					BlockManager.replace(blockNum, modBlock);
					Curses.resetSource(BlockManager.sourceRebuild());
					log.add("Resuming from block " + blockNum + ".");
					blockNum--;
				}
			}
		}
	}catch(Exception e){
		System.out.println("Fatal error : ");
       e.printStackTrace();
       System.exit(1);
    }

	if(cursesRunning) 
		Curses.Close();

	if(IRDebug)
		IRGenerator.IRGenerate(true);

	IRGenerator.IRConfirm();
	BlockManager.Output(sourceName);
	log.add("Processed successfully.");
	for(int i=0; i<log.size(); i++) {
		System.out.println(log.get(i));
	}
	//BlockManager.blockDebug();
	
	if(modified) {
		try {
	    	//sourceName = sourceName.replace(".c","")+"_modified.c";
	    	FileWriter fw = new FileWriter(sourceName);
	    	PrintWriter pw = new PrintWriter(new BufferedWriter(fw));
	  		pw.print(BlockManager.sourceRebuild());
	  		pw.close();
		}catch(IOException e) {
			e.printStackTrace();
		}
	}

	try { 
		for(int i=0; i<snodes.size(); i++) {
		  	blkFileName = sourceName.replace(".c","")+"_blk"+i+".bin";
			ObjectOutputStream objOutStream = new ObjectOutputStream(new FileOutputStream(blkFileName));
       	objOutStream.writeObject(snodes.get(i));
       	objOutStream.close();
       	}
	}catch(Exception e) {
		e.printStackTrace();
	}
	
	if(IRDebug) {
	  IRGenerator.IRGenerate(false);
	  System.exit(0);
	}
	//System.out.println("Tokens: "+getTokens);
}

   public static void ASTdebug(String sourceName){
	System.out.println("AST dump start...");
	try{
	  	FileReader source = new FileReader(new File(sourceName));
	    Parser AST = new Parser(source);
	    SimpleNode n = AST.body();
	    n.dump(" ");
	}catch(Exception e){
	    e.printStackTrace();
	}
	System.exit(0);
    }

   public static void IRdebug(String sourceName){
	System.out.println("IR dump start...");
	try{
	  	FileReader source = new FileReader(new File(sourceName));
	    Parser IR = new Parser(source);
	    ParserVisitor visitor = new ParserVisitorImplements(false);
	    IR.body().jjtAccept(visitor,null);
	    IRGenerator.IRGenerate(false);
	}catch(Exception e){
	    e.printStackTrace();
	}
	System.exit(0);
    }

   public static void generalParsing(String sourceName){
	System.out.println("Parsing in the general method...");
	try{
	  	FileReader source = new FileReader(new File(sourceName));
	    Parser parser = new Parser(source);
	    ParserVisitor visitor = new ParserVisitorImplements(false);
	    parser.body().jjtAccept(visitor,null);
	}catch(Exception e){
	    e.printStackTrace();
	    System.exit(1);
	}
    }		
}

PARSER_END(Parser)

//SKIP: { <[" ","\t","\r","\n"]> }
SPECIAL_TOKEN: { <SPACES: ([" ", "\t", "\n", "\r", "\f"])+> }

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

SPECIAL_TOKEN: {
    <LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

TOKEN:{
	 <VOID:"void">
	|<INT:"int">
	|<DOUBLE:"double">
	|<STATIC:"static">
	|<CONST:"const">
	|<IF:"if">
	|<ELSE:"else">
	|<FOR:"for">
	|<RETURN:"return">
	|<PRINTF:"printf">
}

TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

TOKEN: {
       <INTEGER: ["1"-"9"] (["0"-"9"])* ("U")? ("L")?
       	| "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+ ("U")? ("L")?
		| "0" (["0"-"7"])* ("U")? ("L")?
		>
}

MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM
    | <"\\" (["0"-"7"]){3}>      : CHARACTER_TERM
    | <"\\" ~[]>                 : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT } 

MORE: { <"\""> : IN_STRING }
<IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>
    | <"\\" (["0"-"7"]){3}>
    | <"\\" ~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }

SimpleNode body() #body:
{}
{
	defines() <EOF> {return jjtThis;}
}

SimpleNode chkblk():
{}
{
	def_var_list() stmts() { return jjtThis; }
}

SimpleNode defines():
{}
{
	(LOOKAHEAD(/*storage()*/ type_ref() <IDENTIFIER> "(") def_fun()
	|LOOKAHEAD(3) def_vars()
	/*|def_const()*/)* { return jjtThis; }
}

void def_fun():
{}
{
	/*storage()*/ type_ref() name() "(" params() ")" block()
}

void params():
{}
{
	LOOKAHEAD(<VOID> ")") <VOID>
	|fixedparams()
}

void fixedparams():
{}
{
	param() ( LOOKAHEAD(2) "," param())*
}

void param():
{}
{
	type() name()
}

void block():
{}
{
	"{" chkblk() "}"
}

void def_var_list() #def_var_list(>1):
{}
{
	(def_vars())*
}

void def_vars() #def_vars:
{}
{
	/*storage()*/ type() name() ["=" expr()]
	       ("," name() ["=" expr()])* ";"
}

void def_const():
{}
{
	<CONST> type() name() "=" expr() ";"
}

void type() #type:
{}
{
	type_ref()
}

void type_ref():
{}
{
	type_basic()
}

void type_basic():
{
	Token t = null;
}
{
	 t=<INT> {jjtThis.jjtSetValue(t.image);}
	|t=<DOUBLE> {jjtThis.jjtSetValue(t.image);}
}

void name() #name:
{
	Token t = null;
}
{
	t=<IDENTIFIER> {jjtThis.jjtSetValue(t.image);}
}

void stmts():
{}
{
	(stmt())*
}

void stmt() #stmt:
{}
{
	(";"
	//|LOOKAHEAD(2) labeled_stmt()
	|expr() ";"
	|block()
	|if_stmt()
	|for_stmt()
	|return_stmt()
	|printf_stmt()
	)
}	

void if_stmt():
{}
{
	<IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

void for_stmt():
{}
{
	<FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

void return_stmt():
{}
{
	 LOOKAHEAD(2) <RETURN> ";"
	|<RETURN> expr() ";"
}

void printf_stmt():
{
	Token str = null;
}
{
	<PRINTF> "(" str=<STRING> ("," expr())* ")" ";" {jjtThis.jjtSetValue(str.image);}
}

void expr():
{}
{
	 LOOKAHEAD(term() "=") term() "=" expr() {jjtThis.jjtSetValue("=");}
	|expr10() {jjtThis.jjtSetValue("expr");}
}

void expr10() #expr10(>1):
{}
{
	expr9() /*["?" expr() ":" expr10()]*/
}

void expr9() #expr9(>1):
{}
{
	expr8() /*("||" expr8())**/
}

void expr8() #expr8(>1):
{}
{
	expr7() /*("&&" expr7())**/
}

void expr7() #expr7(>1):
{
	List<String> tokens = new ArrayList<String>();
}
{
	expr6() (">" expr6() {tokens.add(">");}
		|"<" expr6() {tokens.add("<");}
		|">=" expr6() {tokens.add(">=");}
		|"<=" expr6() {tokens.add("<=");}
		|"==" expr6() {tokens.add("==");}
		|"!=" expr6() {tokens.add("!=");}
		)* {jjtThis.jjtSetValue(tokens);}
}

void expr6() #expr6(>1):
{}
{
	expr5() /*("|" expr5())**/
}

void expr5() #expr5(>1):
{}
{
	expr4() /*("^" expr4())**/
}

void expr4() #expr4(>1):
{}
{
	expr3() /*("&" expr3())**/
}

void expr3() #expr3(>1):
{}
{
	expr2() /*(">>" expr2()
		|"<<" expr2())**/
}

void expr2() #expr2(>1):
{
	List<String> tokens = new ArrayList<String>();
}
{
	expr1()
	("+" expr1() {tokens.add("+"); /*getTokens+="+";*/}
	|"-" expr1() {tokens.add("-"); /*getTokens+="-";*/}
	)* {jjtThis.jjtSetValue(tokens);}
}

void expr1() #expr1(>1):
{
	List<String> tokens = new ArrayList<String>();
}
{
	term()
	("*" term() {tokens.add("*");}
	|"/" term() {tokens.add("/");}
	|"%" term() {tokens.add("%");}
	)* {jjtThis.jjtSetValue(tokens);}
}

void term() #term:
{}
{
	 LOOKAHEAD("(" type()) "(" type() ")" term() //{return "(" + ty + ")" + te};
	|unary() //{return te;}
}

void unary():
{}
{
	/* "++" unary()
	|"--" unary()
	|"+" term()
	|"-" term()
	|"!" term()
	|"~" term()
	|"*" term()
	|"&" term()
	|*/
	postfix()
	//sizeof is undefined
}

void postfix():
{
   String token = null;
  }
{
	primary()
	("++" { token = "++"; }
	|"--" { token = "--"; } 
	|/*"[" expr() "]"
	|"." name()
	|"->" name()
	|*/"(" args() ")")* {jjtThis.jjtSetValue(token);}
}

void args():
{}
{
    [ expr() ("," expr())* ]
}

void primary():
{
	Token t;
}
{
	 t=<INTEGER> {jjtThis.jjtSetValue(t.image);}
	//|<CHARACTER>
	//|<STRING>
	|t=<IDENTIFIER> {jjtThis.jjtSetValue(t.image);}
	//|"(" expr() ")"
}

/*void storage():
{}
{
	[<STATIC>]
}*/
